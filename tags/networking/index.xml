<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Networking on Tic Tac Tech</title><link>https://troll-warlord.github.io/tictactech/tags/networking/</link><description>Recent content in Networking on Tic Tac Tech</description><generator>Hugo</generator><language>en</language><atom:link href="https://troll-warlord.github.io/tictactech/tags/networking/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://troll-warlord.github.io/tictactech/blogs/aws/virtual_private_cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://troll-warlord.github.io/tictactech/blogs/aws/virtual_private_cloud/</guid><description>&lt;div style="display: flex; align-items: center; margin-bottom: 20px">
 &lt;img src="https://troll-warlord.github.io/tictactech/images/aws/virtual_private_cloud.svg"
 alt="Amazon VPC" style="height: 60px; margin-right: 12px" />
 &lt;h2 style="margin: 0">Amazon VPC&lt;/h2>
&lt;/div>

&lt;p>Amazon Virtual Private Cloud (VPC) lets you provision a logically isolated network within AWS where you can launch resources in a fully controlled environment. It provides granular control over IP address ranges, subnets, routing, NAT, security groups, and more.&lt;/p>
&lt;p>VPC is the foundational networking layer in AWS, enabling secure and segmented architectures for a wide range of applications.&lt;/p></description></item><item><title/><link>https://troll-warlord.github.io/tictactech/blogs/azure/virtual_network/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://troll-warlord.github.io/tictactech/blogs/azure/virtual_network/</guid><description>&lt;div style="display: flex; align-items: center; margin-bottom: 20px">
 &lt;img src="https://troll-warlord.github.io/tictactech/images/azure/virtual_network.svg"
 alt="Virtual Network (VNet)" style="height: 60px; margin-right: 12px" />
 &lt;h2 style="margin: 0">Virtual Network (VNet)&lt;/h2>
&lt;/div>

&lt;p>&lt;strong>Azure Virtual Network (VNet)&lt;/strong> is the foundational building block of networking in Azure. It provides &lt;strong>logical network isolation&lt;/strong>, enabling you to securely run virtual machines, containers, and applications while maintaining complete control over IP addressing, DNS, routing, and network security.&lt;/p>
&lt;p>VNets are analogous to traditional &lt;strong>on-premises networks&lt;/strong>, but with the added scalability, flexibility, and ease of integration that Azure provides.&lt;/p></description></item><item><title>What is vnet</title><link>https://troll-warlord.github.io/tictactech/blogs/azure/virtual_network/what-is-vnet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://troll-warlord.github.io/tictactech/blogs/azure/virtual_network/what-is-vnet/</guid><description>&lt;p>Lorem ipsum dolor sit amet consectetur adipiscing elit. Quisque faucibus ex sapien vitae pellentesque sem placerat. In id cursus mi pretium tellus duis convallis. Tempus leo eu aenean sed diam urna tempor. Pulvinar vivamus fringilla lacus nec metus bibendum egestas. Iaculis massa nisl malesuada lacinia integer nunc posuere. Ut hendrerit semper vel class aptent taciti sociosqu. Ad litora torquent per conubia nostra inceptos himenaeos.&lt;/p>
&lt;p>Lorem ipsum dolor sit amet consectetur adipiscing elit. Quisque faucibus ex sapien vitae pellentesque sem placerat. In id cursus mi pretium tellus duis convallis. Tempus leo eu aenean sed diam urna tempor. Pulvinar vivamus fringilla lacus nec metus bibendum egestas. Iaculis massa nisl malesuada lacinia integer nunc posuere. Ut hendrerit semper vel class aptent taciti sociosqu. Ad litora torquent per conubia nostra inceptos himenaeos.&lt;/p></description></item><item><title>Why need igw</title><link>https://troll-warlord.github.io/tictactech/blogs/aws/igw/why-need-igw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://troll-warlord.github.io/tictactech/blogs/aws/igw/why-need-igw/</guid><description>&lt;p>Lorem ipsum dolor sit amet consectetur adipiscing elit. Quisque faucibus ex sapien vitae pellentesque sem placerat. In id cursus mi pretium tellus duis convallis. Tempus leo eu aenean sed diam urna tempor. Pulvinar vivamus fringilla lacus nec metus bibendum egestas. Iaculis massa nisl malesuada lacinia integer nunc posuere. Ut hendrerit semper vel class aptent taciti sociosqu. Ad litora torquent per conubia nostra inceptos himenaeos.&lt;/p>
&lt;p>Lorem ipsum dolor sit amet consectetur adipiscing elit. Quisque faucibus ex sapien vitae pellentesque sem placerat. In id cursus mi pretium tellus duis convallis. Tempus leo eu aenean sed diam urna tempor. Pulvinar vivamus fringilla lacus nec metus bibendum egestas. Iaculis massa nisl malesuada lacinia integer nunc posuere. Ut hendrerit semper vel class aptent taciti sociosqu. Ad litora torquent per conubia nostra inceptos himenaeos.&lt;/p></description></item><item><title/><link>https://troll-warlord.github.io/tictactech/blogs/aws/nat_gw/why-need-nat-gw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://troll-warlord.github.io/tictactech/blogs/aws/nat_gw/why-need-nat-gw/</guid><description>&lt;div style="display: flex; align-items: center; margin-bottom: 20px">
 &lt;img src="https://troll-warlord.github.io/tictactech/images/aws/nat_gw.svg"
 alt="why need nat gw" style="height: 60px; margin-right: 12px" />
 &lt;h2 style="margin: 0">
 NAT Gateway | why need nat gw
 &lt;/h2>
&lt;/div>

&lt;p>Lorem ipsum dolor sit amet consectetur adipiscing elit. Quisque faucibus ex sapien vitae pellentesque sem placerat. In id cursus mi pretium tellus duis convallis. Tempus leo eu aenean sed diam urna tempor. Pulvinar vivamus fringilla lacus nec metus bibendum egestas. Iaculis massa nisl malesuada lacinia integer nunc posuere. Ut hendrerit semper vel class aptent taciti sociosqu. Ad litora torquent per conubia nostra inceptos himenaeos.&lt;/p></description></item><item><title/><link>https://troll-warlord.github.io/tictactech/blogs/kubernetes/service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://troll-warlord.github.io/tictactech/blogs/kubernetes/service/</guid><description>&lt;div style="display: flex; align-items: center; margin-bottom: 20px">
 &lt;img src="https://troll-warlord.github.io/tictactech/images/kubernetes/service.svg"
 alt="Service" style="height: 60px; margin-right: 12px" />
 &lt;h2 style="margin: 0">Service&lt;/h2>
&lt;/div>

&lt;p>A &lt;strong>Service&lt;/strong> in Kubernetes provides a stable network endpoint to expose a group of pods. It enables reliable communication between components inside the cluster (ClusterIP), external access (NodePort, LoadBalancer), or custom routing (via Ingress).&lt;/p>
&lt;hr>
&lt;h3 id="topics">Topics&lt;/h3>
&lt;div class="render-topic-links">
 
&lt;/div>

&lt;style>
 
 .link-hover:hover {
 text-decoration: underline;
 color: #0056b3; 
 }
&lt;/style>

&lt;hr>
&lt;h3 id="benefits-of-kubernetes-services">Benefits of Kubernetes Services&lt;/h3>
&lt;h4 id="service-discovery">Service Discovery&lt;/h4>
&lt;p>Pods get dynamic IPs, but a Service provides a consistent DNS name for communication. Kubernetes handles automatic registration and load balancing for backing pods.&lt;/p></description></item><item><title/><link>https://troll-warlord.github.io/tictactech/blogs/aws/nat_gw/outgoing-traffic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://troll-warlord.github.io/tictactech/blogs/aws/nat_gw/outgoing-traffic/</guid><description>&lt;div style="display: flex; align-items: center; margin-bottom: 20px">
 &lt;img src="https://troll-warlord.github.io/tictactech/images/aws/nat_gw.svg"
 alt="Traffic to internet" style="height: 60px; margin-right: 12px" />
 &lt;h2 style="margin: 0">
 NAT Gateway | Traffic to internet
 &lt;/h2>
&lt;/div>

&lt;p>Lorem ipsum dolor sit amet consectetur adipiscing elit. Quisque faucibus ex sapien vitae pellentesque sem placerat. In id cursus mi pretium tellus duis convallis. Tempus leo eu aenean sed diam urna tempor. Pulvinar vivamus fringilla lacus nec metus bibendum egestas. Iaculis massa nisl malesuada lacinia integer nunc posuere. Ut hendrerit semper vel class aptent taciti sociosqu. Ad litora torquent per conubia nostra inceptos himenaeos.&lt;/p></description></item><item><title/><link>https://troll-warlord.github.io/tictactech/blogs/aws/route_53/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://troll-warlord.github.io/tictactech/blogs/aws/route_53/</guid><description>&lt;div style="display: flex; align-items: center; margin-bottom: 20px">
 &lt;img src="https://troll-warlord.github.io/tictactech/images/aws/route_53.svg"
 alt="Route 53" style="height: 60px; margin-right: 12px" />
 &lt;h2 style="margin: 0">Route 53&lt;/h2>
&lt;/div>

&lt;p>Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service that routes end-user requests to internet applications. It can also be used for domain registration and health checking of resources.&lt;/p>
&lt;p>With Route 53, you can manage domain names, configure routing policies, and monitor endpoint health â€” all within a global, reliable infrastructure. It integrates well with other AWS services, making it ideal for cloud-native and hybrid environments.&lt;/p></description></item><item><title/><link>https://troll-warlord.github.io/tictactech/blogs/aws/igw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://troll-warlord.github.io/tictactech/blogs/aws/igw/</guid><description>&lt;div style="display: flex; align-items: center; margin-bottom: 20px">
 &lt;img src="https://troll-warlord.github.io/tictactech/images/aws/igw.svg"
 alt="Internet Gateway" style="height: 60px; margin-right: 12px" />
 &lt;h2 style="margin: 0">Internet Gateway&lt;/h2>
&lt;/div>

&lt;p>An Internet Gateway (IGW) is a horizontally scaled, redundant, and highly available AWS VPC component that enables communication between instances in your VPC and the internet. It acts as a target for route table entries and performs network address translation for public IPs.&lt;/p>
&lt;p>IGW is essential for any resource that needs to be accessed publicly or needs to initiate outbound traffic to the internet while being directly reachable.&lt;/p></description></item><item><title/><link>https://troll-warlord.github.io/tictactech/blogs/aws/nat_gw/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://troll-warlord.github.io/tictactech/blogs/aws/nat_gw/</guid><description>&lt;div style="display: flex; align-items: center; margin-bottom: 20px">
 &lt;img src="https://troll-warlord.github.io/tictactech/images/aws/nat_gw.svg"
 alt="NAT Gateway" style="height: 60px; margin-right: 12px" />
 &lt;h2 style="margin: 0">NAT Gateway&lt;/h2>
&lt;/div>

&lt;p>A NAT (Network Address Translation) Gateway is a managed AWS service that enables instances in a &lt;strong>private subnet&lt;/strong> to access the internet &lt;strong>outbound only&lt;/strong>, without exposing them to inbound internet traffic. This separation of responsibilities allows you to maintain a secure networking model where sensitive backend systems remain isolated while still being able to reach external services as needed.&lt;/p></description></item><item><title>Kubernetes Ingress</title><link>https://troll-warlord.github.io/tictactech/blogs/kubernetes/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://troll-warlord.github.io/tictactech/blogs/kubernetes/ingress/</guid><description>&lt;div style="display: flex; align-items: center; margin-bottom: 20px">
 &lt;img src="https://troll-warlord.github.io/tictactech/images/kubernetes/ingress.svg"
 alt="Ingress" style="height: 60px; margin-right: 12px" />
 &lt;h2 style="margin: 0">Ingress&lt;/h2>
&lt;/div>

&lt;p>A &lt;strong>Kubernetes Ingress&lt;/strong> is an API object that manages &lt;strong>external HTTP and HTTPS traffic&lt;/strong> to services within the cluster. It provides routing rules, TLS termination, and host/path-based routing, acting as a smarter and more efficient alternative to exposing services via &lt;code>LoadBalancer&lt;/code> or &lt;code>NodePort&lt;/code>.&lt;/p>
&lt;p>Ingress sits at the &lt;strong>application layer (Layer 7)&lt;/strong> and typically works with ingress controllers like NGINX, Traefik, or cloud-native controllers.&lt;/p></description></item><item><title/><link>https://troll-warlord.github.io/tictactech/blogs/kubernetes/kube_proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://troll-warlord.github.io/tictactech/blogs/kubernetes/kube_proxy/</guid><description>&lt;div style="display: flex; align-items: center; margin-bottom: 20px">
 &lt;img src="https://troll-warlord.github.io/tictactech/images/kubernetes/kube_proxy.svg"
 alt="Kube Proxy" style="height: 60px; margin-right: 12px" />
 &lt;h2 style="margin: 0">Kube Proxy&lt;/h2>
&lt;/div>

&lt;p>&lt;strong>kube-proxy&lt;/strong> is a core component that runs on &lt;strong>every Kubernetes node&lt;/strong>. It manages the virtual network rules that allow &lt;strong>Pods to communicate with Services&lt;/strong>, handling routing and forwarding at the &lt;strong>network layer&lt;/strong> using mechanisms like &lt;strong>iptables&lt;/strong>, &lt;strong>ipvs&lt;/strong>, or &lt;strong>eBPF&lt;/strong>.&lt;/p>
&lt;p>Itâ€™s the silent worker that makes service discovery and networking possible within the cluster.&lt;/p>
&lt;hr>
&lt;h3 id="topics">Topics&lt;/h3>
&lt;div class="render-topic-links">
 
&lt;/div>

&lt;style>
 
 .link-hover:hover {
 text-decoration: underline;
 color: #0056b3; 
 }
&lt;/style>

&lt;hr>
&lt;h3 id="key-responsibilities">Key Responsibilities&lt;/h3>
&lt;h4 id="virtual-ip-and-port-forwarding">Virtual IP and Port Forwarding&lt;/h4>
&lt;p>When a Service is created, kube-proxy sets up rules to forward traffic from the &lt;strong>cluster IP and port&lt;/strong> to one of the associated pods. This load balancing is transparent and efficient.&lt;/p></description></item></channel></rss>